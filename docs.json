{
  "./code/src/Base/Base.js": [
    {
      "description": "A general purpose component that converts props into styles\ndefined by our theme. It's heavily inspired by the Base\ncomponent provided by [rebass](https://github.com/jxnblk/rebass).",
      "displayName": "Base",
      "methods": [],
      "props": {
        "Component": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "Custom Component"
        },
        "baseStyle": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "The base style will be supplanted by style props, or regular style properties."
        },
        "style": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": "Regular style attribute"
        },
        "underlayColor": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Underlay color. Use 'darken' to automatically darken the backgroundColor."
        },
        "m": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Margin based on the configured scale"
        },
        "mt": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Margin top based on the configured scale"
        },
        "mr": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Margin right based on the configured scale"
        },
        "mb": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Margin bottom based on the configured scale"
        },
        "ml": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Margin left based on the configured scale"
        },
        "mx": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Margin x-axis based on the configured scale"
        },
        "my": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Margin y-asix based on the configured scale"
        },
        "p": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Padding based on the configured scale"
        },
        "pt": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Padding top based on the configured scale"
        },
        "pr": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Padding right based on the configured scale"
        },
        "pb": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Padding bottom based on the configured scale"
        },
        "pl": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Padding left based on the configured scale"
        },
        "px": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Padding x-axis based on the configured scale"
        },
        "py": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Padding y-axis based on the configured scale"
        },
        "backgroundColor": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Background color."
        },
        "rounded": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "bool"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Border radius"
        },
        "borderColor": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Border color"
        },
        "flex": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "Flex property"
        },
        "wrap": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Flex-wrap property"
        },
        "column": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Set the flex-direction to column"
        },
        "row": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Set the flex-direction to row"
        },
        "align": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Align-items property"
        },
        "justify": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Justify-content property"
        },
        "height": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The height of the element"
        },
        "width": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "The width of the element"
        },
        "panza": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "theme provided by a higher order component"
        }
      }
    }
  ],
  "./code/src/Base/TextBase.js": [
    {
      "description": "A general purpose text component which\nconverts props into styles defined in the configuration.\nUnlike Base, TextBase supports special Text props.",
      "displayName": "TextBase",
      "methods": [],
      "props": {
        "Component": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": ""
        },
        "style": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": ""
        },
        "baseStyle": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": ""
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "children (typically text) *"
        },
        "fontSize": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              },
              {
                "value": "5",
                "computed": false
              },
              {
                "value": "6",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "text size *"
        },
        "lineHeight": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              },
              {
                "value": "5",
                "computed": false
              },
              {
                "value": "6",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "text lineheight *",
          "defaultValue": {
            "value": "1",
            "computed": false
          }
        },
        "color": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "text colour *",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          }
        },
        "textAlign": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "text alignment *"
        },
        "bold": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "bold font weight *"
        },
        "thin": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "thin font weight *"
        },
        "thick": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "thick font weight *"
        },
        "panza": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "a theme provided by a higher order component *"
        },
        "inverted": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "use the inverted color (by default, white) *"
        },
        "m": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Margin *"
        },
        "mt": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Margin top *"
        },
        "mr": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Margin right *"
        },
        "mb": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Margin bottom *"
        },
        "ml": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Margin left *"
        },
        "mx": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Margin x-axis *"
        },
        "my": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Margin y-asix *"
        },
        "p": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Padding *"
        },
        "pt": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Padding top *"
        },
        "pr": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Padding right *"
        },
        "pb": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Padding bottom *"
        },
        "pl": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Padding left *"
        },
        "px": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Padding x-axis *"
        },
        "py": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "0",
                "computed": false
              },
              {
                "value": "1",
                "computed": false
              },
              {
                "value": "2",
                "computed": false
              },
              {
                "value": "3",
                "computed": false
              },
              {
                "value": "4",
                "computed": false
              }
            ]
          },
          "required": false,
          "description": "Padding y-axis *"
        },
        "backgroundColor": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Background color *"
        },
        "rounded": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "bool"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Border radius *"
        },
        "borderColor": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Border color *"
        },
        "flex": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "flex property *"
        },
        "wrap": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "flex-wrap property *"
        },
        "column": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "set flex-direction to column *"
        },
        "row": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "set flex-direction to row *"
        },
        "align": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "set align-items property *"
        },
        "justify": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "set justify-content property *"
        },
        "height": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "set the height of the element *"
        },
        "width": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "set the width of the element *"
        }
      }
    }
  ],
  "./code/src/Buttons/Button.js": [
    {
      "description": "A basic button that inherits from Base, and provides colourization\nbased upon background color configuration.\n@Composes Base, Text, Icon",
      "displayName": "Button",
      "methods": [],
      "props": {
        "tiny": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "button size"
        },
        "small": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "medium": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "large": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "giant": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "primary": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Uses the primary colour to style the button."
        },
        "secondary": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Uses the secondary colour to style the button."
        },
        "positive": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Uses the positive colour to style the button."
        },
        "negative": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Uses the negative colour to style the button."
        },
        "default": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Uses the midgray colour to style the button."
        },
        "outline": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Use an outline button style *",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Accepts either a text string or a custom node"
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "disables the button, and reduces its opacity",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "rounded": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "bool"
              }
            ]
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "6",
            "computed": false
          }
        },
        "onPress": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "underlayColor": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "backgroundColor": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "borderColor": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "block": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "stretch the button width",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "icon": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "node"
              }
            ]
          },
          "required": false,
          "description": "optional icon string or node"
        },
        "size": {
          "defaultValue": {
            "value": "'medium'",
            "computed": false
          }
        }
      }
    }
  ],
  "./code/src/Buttons/ButtonGroup.js": [
    {
      "description": "",
      "displayName": "ButtonGroup",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "rounded": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "bool"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": ""
        },
        "vertical": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "segmented": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "A helper to create segemented controls that align together *"
        }
      }
    }
  ],
  "./code/src/Card/Card.js": [
    {
      "description": "A very basic Card wrapper\n@composes Base",
      "displayName": "Card",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "inverted": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "panza": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "./code/src/Card/CardHeader.js": [
    {
      "description": "A very basic card header, which includes an optional avatar,\ntitle, subtitle, and children\n@composes Base, Image, Text",
      "displayName": "CardHeader",
      "methods": [],
      "props": {
        "avatar": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "node"
              }
            ]
          },
          "required": false,
          "description": ""
        },
        "title": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "node"
              }
            ]
          },
          "required": false,
          "description": ""
        },
        "subtitle": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "node"
              }
            ]
          },
          "required": false,
          "description": ""
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "./code/src/Icons/BaseIcon.android.js": [
    {
      "description": "Our base icon component that all other icons\ncompose. It uses ionicons, as provided by\nreact-native-vector-icons",
      "displayName": "BaseIcon",
      "methods": [],
      "props": {
        "name": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": ""
        },
        "size": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "25",
            "computed": false
          }
        }
      }
    }
  ],
  "./code/src/Icons/BaseIcon.js": [
    {
      "description": "Our base icon component that all other icons\ncompose. It uses Ionicons 3, as provided by\nreact-native-vector-icons on Android and iOS.\nTo use this on the web, you must include a link\ntag to the Ionicons 3 stylesheet.\n\n@Platform ios, android, web\n@Composes TextBase",
      "displayName": "Icon",
      "methods": [],
      "props": {
        "name": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "size": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "35",
            "computed": false
          }
        },
        "color": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "./code/src/Icons/BaseIcon.web.js": [
    {
      "description": "",
      "displayName": "BaseIcon",
      "methods": [],
      "props": {
        "size": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "25",
            "computed": false
          }
        },
        "name": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "./code/src/Icons/CheckMark.js": [
    {
      "description": "A basic CheckMark that can either be unchecked\nor checked.\n\n@Platform ios, android, web\n@composes Base, Icon",
      "displayName": "CheckMark",
      "methods": [],
      "props": {
        "isChecked": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "size": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "30",
            "computed": false
          }
        },
        "uncheckedColor": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'light'",
            "computed": false
          }
        },
        "checkedColor": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'positive'",
            "computed": false
          }
        },
        "checkMarkIconName": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'ios-checkmark-circle-outline'",
            "computed": false
          }
        },
        "uncheckedIconName": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'ios-radio-button-off'",
            "computed": false
          }
        }
      }
    }
  ],
  "./code/src/Icons/Icons.js": [
    {
      "description": "",
      "displayName": "ArrowRightIcon",
      "methods": []
    },
    {
      "description": "",
      "displayName": "PlusIcon",
      "methods": []
    },
    {
      "description": "",
      "displayName": "CloseIcon",
      "methods": []
    },
    {
      "description": "",
      "displayName": "BackIcon",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SearchIcon",
      "methods": []
    },
    {
      "description": "",
      "displayName": "MoreIcon",
      "methods": []
    }
  ],
  "./code/src/Icons/TouchableIcon.js": [
    {
      "description": "A touchable wrapper for <Icon />",
      "displayName": "TouchableIcon",
      "methods": [],
      "props": {
        "onPress": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": ""
        },
        "accessibilityLabel": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": ""
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "style": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "./code/src/Image/Image.js": [
    {
      "description": "Fade-in an image when it loads.",
      "displayName": "Image",
      "methods": [
        {
          "name": "onLoad",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        }
      ],
      "props": {
        "fade": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "onLoadEnd": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "height": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": ""
        },
        "width": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": ""
        },
        "circular": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "set the border radius to be fully round (given an equal height/width)",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "style": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": ""
        },
        "source": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": ""
        },
        "resizeMode": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'cover'",
            "computed": false
          }
        },
        "rounded": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "bool"
              }
            ]
          },
          "required": false,
          "description": "the border radius of the image",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
  "./code/src/Input/Input.js": [
    {
      "description": "A basic input\n@composes Text",
      "displayName": "Input",
      "methods": [
        {
          "name": "focus",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        }
      ],
      "props": {
        "tiny": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "large": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "small": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "medium": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "giant": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "inverted": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "placeholderTextColor": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'#888'",
            "computed": false
          }
        }
      }
    }
  ],
  "./code/src/Nav/NavBar.js": [
    {
      "description": "Static navigation bar that mimics that found\nwithin ReactNative. To be used when you want a static\nrepresentation of the NavBar, without transitions.\n\n@Composes Base, NavTitle",
      "displayName": "NavBar",
      "methods": [],
      "props": {
        "title": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "LeftButton": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "RightButton": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "style": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": ""
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "transparent": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "backgroundColor": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "titleColor": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "inverted": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "panza": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": ""
        }
      }
    }
  ],
  "./code/src/Nav/NavIconContainer.js": [
    {
      "description": "A wrapper for <Icon /> that positions it correctly\nin a navigation bar.",
      "displayName": "NavIconContainer",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": ""
        }
      }
    }
  ],
  "./code/src/Nav/NavTitle.js": [
    {
      "description": "Renders text stylized for the Navigation Bar title.\n\nOn iOS it composes PrimaryText.\n\nOn Android, it composes LargeText.\n\n@composes Text",
      "displayName": "NavTitle",
      "methods": [],
      "props": {
        "label": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "color": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "style": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": ""
        },
        "inverted": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "./code/src/Nav/NavTouchableIcon.js": [
    {
      "description": "Wrap Icon components within NavTouchableIcon for display\nof an Icon in the Navigation bar. You may need to fiddle\naround with the sizing of the Icon on android and ios devices\nto ensure that they look right.",
      "displayName": "NavTouchableIcon",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": ""
        },
        "onPress": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": ""
        }
      }
    }
  ],
  "./code/src/Nav/NavTouchableText.js": [
    {
      "description": "Makes a touchable text component for the NavBar. Typically\nused on iOS.\n\n@composes TextBase",
      "displayName": "NavTouchableText",
      "methods": [],
      "props": {
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "color": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'primary'",
            "computed": false
          }
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "bold": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "inverted": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "./code/src/Pages/Error.js": [
    {
      "description": "Display an error, with messages and actions depending\nupon the user state. Particularly useful with Relay.Renderer\nwhen an error state and retry function are provided.",
      "displayName": "ErrorPage",
      "methods": [],
      "props": {
        "retry": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": ""
        },
        "message": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'Hmm, loading appears to be taking a while.'",
            "computed": false
          }
        },
        "detailMessage": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'It\\'s possible that our server are under heavy load, ' +\n  'or that your internet connection is slow. Please try again.'",
            "computed": false
          }
        },
        "offlineMessage": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'Please ensure that you are connected to the internet.'",
            "computed": false
          }
        },
        "style": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": ""
        },
        "isOffline": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "inverted": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "./code/src/Pages/Loading.js": [
    {
      "description": "Displays a loading indicator, and on iOS an optional\nloading message.",
      "displayName": "Loader",
      "methods": [],
      "props": {
        "isLoading": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "large": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "color": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'gray'",
            "computed": false
          }
        },
        "showText": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "loadingText": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'Loading...'",
            "computed": false
          }
        },
        "alignTop": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "inverted": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "./code/src/Popup/Menu.js": [
    {
      "description": "",
      "displayName": "Popup",
      "methods": [],
      "props": {
        "showing": {
          "type": {
            "name": "bool"
          },
          "required": true,
          "description": "",
          "flowType": {
            "name": "boolean"
          }
        },
        "onRequestClose": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": "",
          "flowType": {
            "name": "Function"
          }
        },
        "autoDismiss": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "flowType": {
            "name": "boolean"
          },
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "showCancel": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "flowType": {
            "name": "boolean"
          },
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "backgroundColor": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "flowType": {
            "name": "string"
          },
          "defaultValue": {
            "value": "'rgba(0,0,0,0.6)'",
            "computed": false
          }
        },
        "modalProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "",
          "flowType": {
            "name": "Object"
          },
          "defaultValue": {
            "value": "{}",
            "computed": false
          }
        },
        "customHeader": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "options": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "arrayOf",
                "value": {
                  "name": "node"
                }
              },
              {
                "name": "arrayOf",
                "value": {
                  "name": "shape",
                  "value": {
                    "onPress": {
                      "name": "func",
                      "required": true
                    },
                    "label": {
                      "name": "string",
                      "required": true
                    }
                  }
                }
              }
            ]
          },
          "required": true,
          "description": "",
          "flowType": {
            "name": "union",
            "raw": "ReactElement<any> | Array<OptionsType>",
            "elements": [
              {
                "name": "ReactElement",
                "elements": [
                  {
                    "name": "any"
                  }
                ],
                "raw": "ReactElement<any>"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  onPress: Function;\n  label: string;\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "onPress",
                          "value": {
                            "name": "Function",
                            "required": true
                          }
                        },
                        {
                          "key": "label",
                          "value": {
                            "name": "string",
                            "required": true
                          }
                        }
                      ]
                    }
                  }
                ],
                "raw": "Array<OptionsType>"
              }
            ]
          }
        }
      }
    },
    {
      "description": "",
      "methods": [],
      "props": {
        "inverted": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "onPress": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "backgroundColor": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "opt": {
          "type": {
            "name": "shape",
            "value": {
              "onPress": {
                "name": "func",
                "required": false
              },
              "label": {
                "name": "string",
                "required": true
              }
            }
          },
          "required": false,
          "description": ""
        },
        "panza": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": ""
        }
      }
    }
  ],
  "./code/src/Row/Divider.js": [
    {
      "description": "A simple component used to separate rows, with an\noptional inset margin on the left or right.",
      "displayName": "Divider",
      "methods": [],
      "props": {
        "inset": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        },
        "insetRight": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        },
        "panza": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "theme provided by higher order component *"
        },
        "inverted": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Use the inverted colour *"
        }
      }
    }
  ],
  "./code/src/Row/SectionHeader.js": [
    {
      "description": "SectionHeader is used for rendering a section header within a ListView.\nSupply text as the child.\n@composes Base",
      "displayName": "SectionHeader",
      "methods": [],
      "props": {
        "backgroundColor": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'gray'",
            "computed": false
          }
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "./code/src/Row/TouchableRow.js": [
    {
      "description": "The basic RowCell for use within ListView. It displays\nan image, primary text, secondary text, a value,\nand an arrow right icon if the respective props are\nspecified.\n\n@Platform ios, android, web\n@composes TouchableRowCell, Image, Text",
      "displayName": "TouchableRow",
      "methods": [],
      "props": {
        "primaryText": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "node"
              }
            ]
          },
          "required": false,
          "description": ""
        },
        "secondaryText": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "node"
              }
            ]
          },
          "required": false,
          "description": ""
        },
        "value": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "node"
              }
            ]
          },
          "required": false,
          "description": "A value attribute of the cell, to appear on the right"
        },
        "onPress": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": ""
        },
        "image": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "object"
              },
              {
                "name": "node"
              }
            ]
          },
          "required": false,
          "description": "An thumbnail to be displayed on the left of the cell"
        },
        "height": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": ""
        },
        "inverted": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "showMore": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Displays a right arrow on the right hand side of the cell"
        }
      }
    }
  ],
  "./code/src/Row/TouchableRowCell.js": [
    {
      "description": "A touchable row cell container, typically used\nrendering rows in a <ListView>.",
      "displayName": "TouchableRowCell",
      "methods": [],
      "props": {
        "onPress": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "highlighted": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "function noop () {}",
            "computed": false
          }
        },
        "showMore": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "showMoreProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": ""
        },
        "underlayColor": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'rgba(0,0,0,0.1)'",
            "computed": false
          }
        },
        "height": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": ""
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "./code/src/RowInput/InputAddRow.js": [
    {
      "description": "",
      "methods": []
    },
    {
      "description": "An InputTouchable with a plus icon. This is typically used\nwithin the context of an InputGroup consisting of\nremovable inputs.\n\n@Platform ios, android, web\n@Composes InputTouchable, Icon",
      "displayName": "InputAddRow",
      "methods": [],
      "props": {
        "backgroundColor": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "onPress": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": ""
        },
        "label": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": ""
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "./code/src/RowInput/InputDatePicker.js": [
    {
      "description": "InputDatePicker a cross-platform InputRow inputting\ndates.\n\nOn iOS devices, the row examples to reveal\nDatePickerIOS when selected. The humanized date should\nbe supplied as the value prop, and it should be\nupdated when the value of the date-picker changes.\n\nOn Anroid, the date-picker prompts the user to select\na date in a modal menu.\n\n@Platform ios, android\n@composes InputTouchable",
      "displayName": "InputDatePicker",
      "methods": [
        {
          "name": "toggleDatePicker",
          "docblock": null,
          "modifiers": [
            "async"
          ],
          "params": [],
          "returns": null
        },
        {
          "name": "renderIOS",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        }
      ],
      "props": {
        "expanded": {
          "type": {
            "name": "bool"
          },
          "required": true,
          "description": ""
        },
        "onToggleExpansion": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": "function called to toggle the visibility of the date-picker. (iOS only) *"
        },
        "value": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "the currently selected date to be displayed in collapsed row. *"
        },
        "maxDate": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "minDate": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "label": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "mode": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "date": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": ""
        },
        "onDateChange": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": ""
        },
        "editable": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "inverted": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "./code/src/RowInput/InputDatePicker.web.js": [
    {
      "description": "",
      "displayName": "InputDatePickerWeb",
      "methods": []
    }
  ],
  "./code/src/RowInput/InputExpandable.js": [
    {
      "description": "An input row field that expands when pressed to reveal its\nchildren.\n\n@Platform ios, android, web",
      "displayName": "InputExpandable",
      "methods": [],
      "props": {
        "expanded": {
          "type": {
            "name": "bool"
          },
          "required": true,
          "description": ""
        },
        "Row": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": ""
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "./code/src/RowInput/InputGroup.js": [
    {
      "description": "Wrapping components with InputGroup gives you the\noption of giving Inputs dividing borders, dividing\nborders with an inset, a top border (with a unique inset value),\na bottom border (with a unique inset value), shared background\ncolours, margins, and a label. You could supply your own\nchild components, too.\n\n@Platform ios, android, web\n@Composes Base, Divider, SectionHeader",
      "displayName": "InputGroup",
      "methods": [],
      "props": {
        "style": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": ""
        },
        "inset": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "left margin inset for the divider border (excluding top and bottom)",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        },
        "showTopBorder": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "show the top border",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "showBottomBorder": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "show the bottom border",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "showBorder": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "whether to show the dividing border",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "topInset": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "left margin inset for the top border",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        },
        "bottomInset": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "left margin inset for the bottom border",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        },
        "label": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "a label for the input group"
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "backgroundColor": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "inverted": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "./code/src/RowInput/InputHelpText.js": [
    {
      "description": "InputHelpText is typically used after an InputGroup to\noffer additional information about the above inputs. This is\njust a simple wrapper around Text with some padding\nprovided, and the text color set to light.\n\n@Platform ios, android, web\n@composes Text",
      "displayName": "InputHelpText",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": ""
        },
        "inverted": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "./code/src/RowInput/InputPicker.js": [
    {
      "description": "InputPicker provides a unified API for Android and iOS\npicker rows.\n\nOn iOS, when the user selects the picker row, the row expands to\nreveal the children. The value prop that appears alongside\nthe right of the picker row will typically be a humanized\nversion of the selected value in the picker.\n\nOn Android, we display the picker as the row itself. When\nselected, the picker prompt will occur. A label is\nrendered above the picker. The value prop is ignored,\nsince the Android picker already prints the value for us.\n\n@platform ios, android\n@composes InputTouchable, InputExpandable",
      "displayName": "InputPicker",
      "methods": [
        {
          "name": "renderAndroid",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "renderIOS",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        }
      ],
      "props": {
        "onToggleExpansion": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": "a function called when toggling the visibility of the picker. (iOS only)"
        },
        "editable": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "value": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "the picker value displayed in the row. (iOS only)"
        },
        "label": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": "the label for the picker *"
        },
        "expanded": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "controls whether the picker is visible. (iOS only)"
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "backgroundColor": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "panza": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "theme provided by higher order component"
        }
      }
    }
  ],
  "./code/src/RowInput/InputRow.js": [
    {
      "description": "",
      "methods": []
    },
    {
      "description": "A collection of RowActions to be displayed behind\na revealing row.",
      "displayName": "RowActions",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "style": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": ""
        }
      }
    },
    {
      "description": "A row action that hide underneath the row, such\nas 'Delete', or 'Edit', etc.",
      "displayName": "RowAction",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        }
      }
    },
    {
      "description": "Remove button",
      "displayName": "RemoveButton",
      "methods": []
    },
    {
      "description": "An Input field with a lot of added functionality. You'd typically\nwant to wrap this within an InputGroup.\n\n@Platform ios, android, web\n@Composes RevealingRow, InputRowCell, RemoveButton, Input, Base, Text, RowAction, RowActions",
      "displayName": "InputRow",
      "methods": [
        {
          "name": "renderLabel",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        }
      ],
      "props": {
        "label": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "autoFocus": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "removable": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "placeholder": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "vertical": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "onSelectLabel": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "onChangeText": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": ""
        },
        "value": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "node"
              }
            ]
          },
          "required": false,
          "description": ""
        },
        "backgroundColor": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'white'",
            "computed": false
          }
        },
        "editable": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "labelWidth": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": ""
        },
        "verticalHeight": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "80",
            "computed": false
          }
        },
        "onRequestRemove": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": ""
        },
        "height": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "50",
            "computed": false
          }
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "inverted": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "condensed": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "multiline": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "./code/src/RowInput/InputRowCell.js": [
    {
      "description": "A simple component that is used to wrap various Input Rows.\nIt provides a fixed height, and other default styles.\n\n@Platform ios, android, web\n@Composes Base",
      "displayName": "InputRowCell",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": ""
        },
        "height": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "50",
            "computed": false
          }
        }
      }
    }
  ],
  "./code/src/RowInput/InputRowRevealOptions.js": [
    {
      "description": "Input Option",
      "displayName": "RevealOption",
      "methods": [],
      "props": {
        "onPress": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": ""
        },
        "backgroundColor": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'midgray'",
            "computed": false
          }
        },
        "label": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": ""
        },
        "textColor": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'white'",
            "computed": false
          }
        }
      }
    },
    {
      "description": "Revealable row options container. Typically used\nto delete a row.",
      "displayName": "InputRowRevealOptions",
      "methods": [],
      "props": {
        "height": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "40",
            "computed": false
          }
        },
        "options": {
          "type": {
            "name": "array"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "./code/src/RowInput/InputToggle.js": [
    {
      "description": "A row with a label and switch, allowing\nthe user to toggle a boolean value.\n\n@Platform ios, android\n@Composes InputRowCell, Switch",
      "displayName": "InputToggle",
      "methods": [],
      "props": {
        "style": {
          "type": {
            "name": "any"
          },
          "required": false,
          "description": ""
        },
        "value": {
          "type": {
            "name": "bool"
          },
          "required": true,
          "description": ""
        },
        "backgroundColor": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'transparent'",
            "computed": false
          }
        },
        "label": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": ""
        },
        "onValueChange": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": ""
        },
        "editable": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "switchProps": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": ""
        },
        "onTintColor": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'success'",
            "computed": false
          }
        },
        "panza": {
          "type": {
            "name": "object"
          },
          "required": true,
          "description": "theme provided by panza *"
        }
      }
    }
  ],
  "./code/src/RowInput/InputTouchable.js": [
    {
      "description": "An InputTouchable is typically used within the context of an\nInputGroup, when you want the user to select a value from another\nListView, PopupMenu, etc. It's a very simple wrapper around\nTouchableRow, to make it play nicely with other Input components.\n\n@Platform ios, android, web\n@composes TouchableRow, Text",
      "displayName": "InputTouchable",
      "methods": [],
      "props": {
        "backgroundColor": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'white'",
            "computed": false
          }
        },
        "label": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "node"
              }
            ]
          },
          "required": true,
          "description": ""
        },
        "icon": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "image": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": ""
        },
        "value": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "node"
              }
            ]
          },
          "required": false,
          "description": ""
        },
        "showMore": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "condensed": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "onPress": {
          "type": {
            "name": "func"
          },
          "required": true,
          "description": ""
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "labelColor": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'default'",
            "computed": false
          }
        },
        "inverted": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "./code/src/RowInput/RevealingRow.js": [
    {
      "description": "ReavealingRow enables a row to have revealed options\nthat appear, for instance, when editing it.\n\n@Platform ios, android, web\n@Composes Base",
      "displayName": "RevealingRow",
      "methods": [
        {
          "name": "onViewLayout",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "e",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "onOptionsLayout",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "e",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "showOptions",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "hideOptions",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        }
      ],
      "props": {
        "showingOptions": {
          "type": {
            "name": "bool"
          },
          "required": true,
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "revealedContent": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": ""
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "backgroundColor": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "",
          "defaultValue": {
            "value": "'white'",
            "computed": false
          }
        }
      }
    }
  ],
  "./code/src/Text/Text.js": [
    {
      "description": "Basic Text Component that provides shorthands for sizing,\nlineHeight, and fontWeights.",
      "displayName": "Text",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        },
        "tiny": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "small": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "medium": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "large": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "giant": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "thin": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "thick": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "bold": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "inverted": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "lineHeight": {
          "type": {
            "name": "number"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ]
}